<?php
/**
 * @file
 * Main module file for the image_css_js module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function image_css_js_field_formatter_info() {
  return array(
    'image_css_js_js' => array(
      'label' => t('JS Setting'),
      'field types' => array('image'),
      'settings' => array(
        'setting_name' => 'header_image',
        'image_style' => '',
        'picture_mapping' => '',
      ),
    ),
    'image_css_js_css' => array(
      'label' => t('CSS Background'),
      'field types' => array('image'),
      'settings' => array(
        'class' => 'html',
        'picture_mapping' => '',
        'image_style' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function image_css_js_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $token_type = token_get_entity_mapping('entity', $instance['entity_type']);
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if (module_exists('picture')) {
    $picture_mappings = picture_get_mapping_options();

    if ($picture_mappings) {
      $picture_mapping_element = array(
          '#title' => t('Picture mapping'),
          '#type' => 'select',
          '#default_value' => isset($settings['picture_mapping']) ? $settings['picture_mapping'] : '',
          '#required' => TRUE,
          '#options' => $picture_mappings,
      );
    }
  }

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $image_style_element = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  switch ($instance['display'][$view_mode]['type']) {
    case 'image_css_js_js':
      $element['setting_name'] = array(
        '#type' => 'machine_name',
        '#title' => t('Setting name'),
        '#default_value' => $settings['setting_name'],
      );

      $element['picture_mapping'] = isset($picture_mapping_element) ? $picture_mapping_element : NULL;
      $element['image_style'] = $image_style_element;

      break;

    case 'image_css_js_css':
      $element['class'] = array(
        '#type' => 'textfield',
        '#title' => t('Class'),
        '#default_value' => $settings['class'],
        '#description' => t('The CSS class to apply the background image to. Use [id] for the id of this entity.'),
      );

      $element['picture_mapping'] = isset($picture_mapping_element) ? $picture_mapping_element : NULL;
      $element['image_style'] = $image_style_element;


      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_css_js_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = array();

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if (module_exists('picture')) {
    $picture_mappings = picture_get_mapping_options();

    if (isset($picture_mappings[$settings['picture_mapping']])) {
      $summary[] = t('Picture mapping: @mapping', array('@mapping' => $picture_mappings[$settings['picture_mapping']]));
    }
  }

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  switch ($instance['display'][$view_mode]['type']) {

    case 'image_css_js_js':
      $summary[] = t('JS Setting: Drupal.settings.image_css_js.@setting_name', array('@setting_name' => $settings['setting_name']));
      break;

    case 'image_css_js_css':
      $summary[] = t('Class: @class', array('@class' => $settings['class']));
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function image_css_js_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'image_css_js_js':
      foreach ($items as $delta => $item) {
        if (!empty($display['settings']['image_style'])) {
          $image_url = image_style_url($display['settings']['image_style'], $item['uri']);
        }
        else {
          $image_url = file_create_url($item['uri']);
        }

        $element[$delta] = array(
          // No content to the markup, but wrapper divs are still being output.
          '#markup' => NULL,
          '#attached' => array(
            'js' => array(
              array(
                'data' => array(
                  'image_css_js' => array($display['settings']['setting_name'] => $image_url),
                ),
                'type' => 'setting'
              ),
            ),
          ),
        );
      }
      break;

    case 'image_css_js_css':
      $class = $display['settings']['class'];
      // If [id] pseudo-token is included, replace with the entity id.
      if (strpos($class, '[id]')) {
        list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
        $class = str_replace('[id]', $id, $class);
      }

      // Sanitize the resulting class.
      $class = drupal_html_class($class);

      foreach ($items as $delta => $item) {
        if (!empty($display['settings']['picture_mapping'])) {
          if (($image = image_load($item['uri'])) === FALSE) {
            watchdog('image_css_js', 'Unable to load image: %image', array('%image' => $item['uri']));
            // If the image couldn't be loaded return nothing.
            return NULL;
          }
          $picture_mapping = picture_mapping_load($display['settings']['picture_mapping']);
          $breakpoint_styles = picture_get_mapping_breakpoints($picture_mapping, $display['settings']['image_style']);
          // All breakpoints and multipliers.
          foreach ($breakpoint_styles as $breakpoint_name => $multipliers) {
            $breakpoint = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
            if ($breakpoint) {
              $sizes = array();
              $srcset = array();
              $derivative_mime_types = array();
              foreach ($multipliers as $multiplier => $mapping_definition) {
                switch ($mapping_definition['mapping_type']) {
                  case 'sizes':
                    foreach (array_filter($mapping_definition['sizes_image_styles']) as $image_style_name) {
                      $dimensions = array(
                          'width' => $image->info['width'],
                          'height' => $image->info['height'],
                      );
                      picture_get_image_dimensions($image_style_name, $dimensions);
                      // Get mime type.
                      //$derivative_mime_type = $mime_type;
                      //$image_style->transformMimeType($derivative_mime_type);
                      //$derivative_mime_types[] = $derivative_mime_type;

                      // @TODO removed:  . ' ' . $dimensions['width'] . 'w'
                      $srcset[] = _picture_image_style_url($image_style_name, $item['uri']);
                      $sizes = array_merge(explode(',', $mapping_definition['sizes']), $sizes);
                    }
                    break;
                  case 'image_style':
                    // Get mime type (not implemented in Drupal 7.
                    // $derivative_mime_type = $mime_type;
                    // $image_style->transformMimeType($derivative_mime_type);
                    // $derivative_mime_types[] = $derivative_mime_type;
                    // @TODO removed multiplier.
                    $srcset[] = _picture_image_style_url($mapping_definition['image_style'], $item['uri']);
                    break;
                }
              }

              // @TODO grabbing the first srcset value only.
              $css[] = "@media $breakpoint->breakpoint  { .$class { background-image: url('$srcset[0]'); } }";
            }
          }

        }

        if (!(count($css) > 0)) {
          if (!empty($display['settings']['image_style'])) {
            $image_url = image_style_url($display['settings']['image_style'], $item['uri']);
          } else {
            $image_url = file_create_url($item['uri']);
          }

          // Apply the background image. Additional styling should be in custom CSS.
          $css[] = ".$class { background-image: url('$image_url'); }";
        }

        // Reverse the order of the media queries assuming they are in Larges to smallest by default.
        // Probably not a completely safe assumption.
        $css = array_reverse($css);
        
        $element[$delta] = array(
          // No content to the markup, but wrapper divs are still being output.
          '#markup' => NULL,
          '#attached' => array(
            'css' => array(
              array(
                'data' => implode(' ', $css),
                'type' => 'inline'
              ),
            ),
          ),
        );
      }
      break;
  }

  return $element;
}
