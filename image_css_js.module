<?php
/**
 * @file
 * Main module file for the image_css_js module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function image_css_js_field_formatter_info() {
  return array(
    'image_css_js_js' => array(
      'label' => t('Image URL as JS Setting'),
      'field types' => array('image', 'file'),
      'settings' => array(
        'setting_name' => 'header_image',
        'image_style' => ''
      )
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function image_css_js_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  switch ($instance['display'][$view_mode]['type']) {
    case 'image_css_js_js':
      $display = $instance['display'][$view_mode];
      $settings = $display['settings'];

      $element['setting_name'] = array(
        '#type' => 'machine_name',
        '#title' => t('Setting name'),
        '#default_value' => $settings['setting_name'],
      );

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $element['image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#default_value' => $settings['image_style'],
        '#empty_option' => t('None (original image)'),
        '#options' => $image_styles,
      );

      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_css_js_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = array();

  switch ($instance['display'][$view_mode]['type']) {
    case 'image_css_js_js':
      $display = $instance['display'][$view_mode];
      $settings = $display['settings'];

      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      // Unset possible 'No defined styles' option.
      unset($image_styles['']);
      // Styles could be lost because of enabled/disabled modules that defines
      // their styles in code.
      if (isset($image_styles[$settings['image_style']])) {
        $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
      }
      else {
        $summary[] = t('Original image');
      }

      $summary[] = t('JS Setting: Drupal.settings.image_css_js.@setting_name', array('@setting_name' => $settings['setting_name']));

      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function image_css_js_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'image_css_js_js':
      foreach ($items as $delta => $item) {


        if (!empty($display['settings']['image_style'])) {
          $image_url = image_style_url($display['settings']['image_style'], $item['uri']);
        }
        else {
          $image_url = file_create_url($item['uri']);
        }

        $element[$delta] = array(
          // No content to the markup, but wrapper divs are still being output.
          '#markup' => NULL,
          '#attached' => array(
            'js' => array(
              array(
                'data' => array(
                  'image_css_js' => array($display['settings']['setting_name'] => $image_url),
                ),
                'type' => 'setting'
              ),
            ),
          ),
        );
      }
      break;
  }

  return $element;
}